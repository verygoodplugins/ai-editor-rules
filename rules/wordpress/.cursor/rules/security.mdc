# WordPress Security Rules

## Input Sanitization
Always sanitize user input before processing or storing:

```php
// Text fields
$clean_text = sanitize_text_field( $_POST['text_field'] );

// Email addresses
$clean_email = sanitize_email( $_POST['email'] );

// URLs
$clean_url = esc_url_raw( $_POST['url'] );

// HTML content (allows safe HTML)
$clean_html = wp_kses_post( $_POST['content'] );

// File names
$clean_filename = sanitize_file_name( $_POST['filename'] );

// Keys/slugs
$clean_key = sanitize_key( $_POST['key'] );

// Integers
$clean_int = absint( $_POST['number'] );

// Arrays (sanitize each element)
$clean_array = array_map( 'sanitize_text_field', $_POST['array_field'] );
```

## Output Escaping
Always escape output to prevent XSS attacks:

```php
// HTML content
echo esc_html( $text );

// HTML attributes
echo '<div class="' . esc_attr( $class ) . '">';

// URLs
echo '<a href="' . esc_url( $link ) . '">';

// JavaScript strings
echo '<script>var text = "' . esc_js( $js_text ) . '";</script>';

// HTML with allowed tags
echo wp_kses_post( $html_content );

// Translation with escaping
echo esc_html__( 'Text string', 'textdomain' );
```

## Nonce Verification
Use nonces to prevent CSRF attacks:

```php
// Creating nonces
wp_nonce_field( 'action_name', 'nonce_field_name' );

// URL nonces
$url = wp_nonce_url( $url, 'action_name' );

// Verifying nonces
if ( ! wp_verify_nonce( $_POST['nonce_field_name'], 'action_name' ) ) {
    wp_die( __( 'Security check failed.', 'textdomain' ) );
}

// For AJAX requests
check_ajax_referer( 'action_name', 'nonce_field_name' );
```

## Capability Checks
Always verify user permissions:

```php
// Check if user can perform action
if ( ! current_user_can( 'manage_options' ) ) {
    wp_die( __( 'You do not have permission to access this page.', 'textdomain' ) );
}

// Check specific capabilities
if ( ! current_user_can( 'edit_posts' ) ) {
    return new WP_Error( 'insufficient_permissions', __( 'Insufficient permissions.', 'textdomain' ) );
}

// Check post-specific permissions
if ( ! current_user_can( 'edit_post', $post_id ) ) {
    return false;
}
```

## Database Security
Use prepared statements for all database operations:

```php
global $wpdb;

// Prepared statements with placeholders
$results = $wpdb->get_results( $wpdb->prepare(
    "SELECT * FROM {$wpdb->prefix}table WHERE id = %d AND status = %s",
    $id,
    $status
) );

// Insert with prepared data
$wpdb->insert(
    $wpdb->prefix . 'table',
    array(
        'column1' => $value1,
        'column2' => $value2
    ),
    array( '%s', '%d' ) // Format specifiers
);

// Update with prepared data
$wpdb->update(
    $wpdb->prefix . 'table',
    array( 'column' => $new_value ),
    array( 'id' => $id ),
    array( '%s' ),
    array( '%d' )
);
```

## File Security
Secure file operations and uploads:

```php
// Validate file uploads
if ( ! function_exists( 'wp_handle_upload' ) ) {
    require_once ABSPATH . 'wp-admin/includes/file.php';
}

$uploaded_file = wp_handle_upload( $_FILES['file'], array( 'test_form' => false ) );

if ( isset( $uploaded_file['error'] ) ) {
    return new WP_Error( 'upload_error', $uploaded_file['error'] );
}

// Validate file types
$allowed_types = array( 'jpg', 'jpeg', 'png', 'gif', 'pdf' );
$file_extension = pathinfo( $filename, PATHINFO_EXTENSION );

if ( ! in_array( strtolower( $file_extension ), $allowed_types ) ) {
    return new WP_Error( 'invalid_file_type', __( 'Invalid file type.', 'textdomain' ) );
}

// Secure file paths
$upload_dir = wp_upload_dir();
$file_path = trailingslashit( $upload_dir['path'] ) . sanitize_file_name( $filename );
```

## Data Validation
Validate data before processing:

```php
// Email validation
if ( ! is_email( $email ) ) {
    return new WP_Error( 'invalid_email', __( 'Invalid email address.', 'textdomain' ) );
}

// URL validation
if ( ! filter_var( $url, FILTER_VALIDATE_URL ) ) {
    return new WP_Error( 'invalid_url', __( 'Invalid URL.', 'textdomain' ) );
}

// Numeric validation
if ( ! is_numeric( $value ) || $value < 0 ) {
    return new WP_Error( 'invalid_number', __( 'Invalid number.', 'textdomain' ) );
}

// Required field validation
if ( empty( $required_field ) ) {
    return new WP_Error( 'required_field', __( 'This field is required.', 'textdomain' ) );
}
```

## API Security
Secure REST API endpoints:

```php
// Register secure REST route
register_rest_route( 'your-namespace/v1', '/endpoint', array(
    'methods' => 'POST',
    'callback' => 'your_callback_function',
    'permission_callback' => 'your_permission_callback',
    'args' => array(
        'param' => array(
            'required' => true,
            'validate_callback' => 'your_validation_callback',
            'sanitize_callback' => 'sanitize_text_field',
        ),
    ),
) );

// Permission callback
function your_permission_callback() {
    return current_user_can( 'manage_options' );
}

// Validation callback
function your_validation_callback( $param ) {
    return is_string( $param ) && strlen( $param ) > 0;
}
```

## Secure AJAX Handlers
```php
// AJAX handler with security checks
function your_ajax_handler() {
    // Check nonce
    check_ajax_referer( 'your_action', 'nonce' );
    
    // Check capabilities
    if ( ! current_user_can( 'manage_options' ) ) {
        wp_die( -1, 403 );
    }
    
    // Sanitize input
    $data = sanitize_text_field( $_POST['data'] );
    
    // Process and return response
    wp_send_json_success( $response );
}
add_action( 'wp_ajax_your_action', 'your_ajax_handler' );
```

## Security Headers
Add security headers when appropriate:

```php
// In admin or sensitive pages
function add_security_headers() {
    header( 'X-Content-Type-Options: nosniff' );
    header( 'X-Frame-Options: SAMEORIGIN' );
    header( 'X-XSS-Protection: 1; mode=block' );
}
add_action( 'admin_init', 'add_security_headers' );
```

## Common Security Mistakes to Avoid
- Never trust user input without sanitization
- Don't use direct database queries without preparation
- Always escape output, especially in attributes
- Don't rely solely on JavaScript validation
- Never expose sensitive information in HTML comments or JavaScript
- Don't use `extract()` on user data
- Avoid using `eval()` or similar dynamic code execution
- Don't store sensitive data in cookies without encryption

## Security Testing Checklist
- [ ] All user inputs are sanitized
- [ ] All outputs are escaped
- [ ] Nonces are used for state-changing operations
- [ ] User capabilities are checked
- [ ] Database queries use prepared statements
- [ ] File uploads are validated and secured
- [ ] AJAX endpoints have proper security checks
- [ ] No sensitive information is exposed in frontend