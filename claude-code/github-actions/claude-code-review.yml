name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    paths:
      - "**/*.php"
      - "**/*.rb" 
      - "**/*.js"
      - "**/*.jsx"
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.vue"
      - "**/*.py"
      - "**/*.go"

jobs:
  claude-review:
    # Optional: Filter by PR author to focus on external contributors
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context

      - name: Detect Project Type
        id: detect-project
        run: |
          if [ -f "wp-config.php" ] || [ -f "style.css" ] || [ -d "wp-content" ] || grep -q "WordPress" composer.json 2>/dev/null; then
            echo "type=wordpress" >> $GITHUB_OUTPUT
          elif [ -f "Gemfile" ] && grep -q "rails" Gemfile; then
            echo "type=rails" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ] && (grep -q "react" package.json || grep -q "next" package.json || grep -q "vue" package.json); then
            echo "type=frontend" >> $GITHUB_OUTPUT
          else
            echo "type=general" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Use Claude Opus for more thorough reviews
          # model: "claude-opus-4-20250514"
          
          # Technology-specific prompts
          direct_prompt: |
            ${{ steps.detect-project.outputs.type == 'wordpress' && 
            'Please review this WordPress PR focusing on:
            - WordPress coding standards and best practices
            - Security: Input sanitization, output escaping, nonce verification
            - Performance: Database queries, caching, asset loading
            - Compatibility: WordPress version compatibility, multisite support
            - Plugin standards: Proper hooks usage, activation/deactivation
            - Code organization: File structure, class organization
            - Documentation: Inline docs following WordPress standards
            
            Pay special attention to:
            - XSS and SQL injection prevention
            - Proper use of WordPress APIs
            - Internationalization readiness
            - Accessibility compliance' ||
            
            steps.detect-project.outputs.type == 'rails' && 
            'Please review this Ruby on Rails PR focusing on:
            - Rails conventions and best practices
            - MVC architecture: Thin controllers, service objects
            - ActiveRecord: Associations, validations, query optimization
            - Security: Strong parameters, authentication, authorization
            - Performance: N+1 queries, database indexes, caching
            - Testing: Test coverage, test quality, edge cases
            - Code organization: Service objects, concerns, proper abstraction
            
            Pay special attention to:
            - Database migration safety
            - API security and rate limiting
            - Background job implementation
            - Rails upgrade compatibility' ||
            
            steps.detect-project.outputs.type == 'frontend' && 
            'Please review this frontend PR focusing on:
            - React/Vue best practices and patterns
            - Component architecture and reusability
            - TypeScript usage and type safety
            - Performance: Bundle size, rendering optimization
            - Accessibility: ARIA labels, keyboard navigation
            - Security: XSS prevention, secure API calls
            - Testing: Component tests, integration tests
            - Code organization: Hooks, state management
            
            Pay special attention to:
            - Browser compatibility
            - Mobile responsiveness
            - SEO considerations
            - Error handling and loading states' ||
            
            'Please review this PR focusing on:
            - Code quality and maintainability
            - Security best practices
            - Performance considerations
            - Testing coverage and quality
            - Documentation completeness
            - Error handling patterns
            
            Be thorough but constructive in your feedback.' }}

          # Use sticky comments for consistent feedback
          use_sticky_comment: true
          
          # Allow Claude to run tests and linting
          allowed_tools: |
            ${{ steps.detect-project.outputs.type == 'wordpress' && 
            'Bash(composer:*),Bash(phpunit:*),Bash(phpcs:*),Bash(wp:*)' ||
            
            steps.detect-project.outputs.type == 'rails' && 
            'Bash(bundle:*),Bash(rspec:*),Bash(rubocop:*),Bash(brakeman:*)' ||
            
            steps.detect-project.outputs.type == 'frontend' && 
            'Bash(npm:*),Bash(yarn:*),Bash(jest:*),Bash(eslint:*)' ||
            
            'Bash(git:*),Bash(find:*),Bash(grep:*)' }}
          
          # Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]') &&
          #   !contains(github.event.pull_request.title, 'Draft:')

      - name: Add Project Context Comment
        if: steps.claude-review.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const projectType = '${{ steps.detect-project.outputs.type }}';
            const contextMessages = {
              wordpress: 'üîå **WordPress Project Detected** - Review focused on WP standards, security, and performance.',
              rails: 'üíé **Rails Project Detected** - Review focused on Rails conventions, security, and performance.',
              frontend: '‚öõÔ∏è **Frontend Project Detected** - Review focused on component patterns, accessibility, and performance.',
              general: 'üîç **General Project** - Review focused on code quality and best practices.'
            };
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: contextMessages[projectType] || contextMessages.general
            });

  # Optional: Run additional checks based on project type
  additional-checks:
    if: needs.claude-review.result == 'success'
    needs: claude-review
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: WordPress Security Scan
        if: contains(needs.claude-review.outputs.project-type, 'wordpress')
        run: |
          # Add WordPress-specific security scanning
          echo "Running WordPress security checks..."
          # Could integrate tools like WPScan, PHP_CodeSniffer with WordPress rules
          
      - name: Rails Security Scan  
        if: contains(needs.claude-review.outputs.project-type, 'rails')
        run: |
          # Add Rails-specific security scanning
          echo "Running Rails security checks..."
          # Could integrate Brakeman, bundle audit, etc.
          
      - name: Frontend Security Scan
        if: contains(needs.claude-review.outputs.project-type, 'frontend')
        run: |
          # Add frontend-specific security scanning  
          echo "Running frontend security checks..."
          # Could integrate npm audit, Snyk, etc.